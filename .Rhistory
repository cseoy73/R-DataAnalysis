seg=4,                        # 축의 눈금 분할
axislabcol='grey',            # 축의 레이블 색
caxislabels=seq(0,100,25)     # 축의 레이블 값
)
ds <- rbind(picher_max, picher_min, picher_yang)
radarchart(ds,
pcol='red',
caxislabels=seq(0,100,25),
title = paste(row.names(ds[3,])))
radarchart(ds,
pcol='red',
seg=4,
caxislabels=seq(0,100,25),
title = paste(row.names(ds[3,])))
month <- c(1,2,3,4,5,6)
rain  <- c(55,50,45,50,60,70)
df <- data.frame(month,rain)           # 그래프를 작성할 대상 데이터
df
ggplot(df, aes(x=month,y=rain)) +      # 그래프를 작성할 데이터 지정
geom_bar(stat='identity',            # 막대그래프의 형태 지정
width=0.7,                  # 막대의 폭 지정
fill='steelblue')
library(ggplot2)
ggplot(df, aes(x=month,y=rain)) +      # 그래프를 작성할 데이터 지정
geom_bar(stat='identity',            # 막대그래프의 형태 지정
width=0.7,                  # 막대의 폭 지정
fill='steelblue')
ggplot(df, aes(x=month,y=rain)) +      # 그래프를 그릴 데이터 지정
geom_bar(stat='identity',            # 막대 높이는 y축에 해당하는 열의 값
width=0.7,                  # 막대의 폭 지정
fill='steelblue') +         # 막대의 색 지정
ggtitle('월별 강수량') +              # 그래프의 제목 지정
theme(plot.title = element_text(size=25, face='bold', colour='steelblue')) +
labs(x='월',y='강수량') +            # 그래프의 x, y축 레이블 지정
coord_flip()
ggplot(iris, aes(x=Petal.Length)) +    # 그래프를 그릴 데이터 지정
geom_histogram(binwidth =0.5)
ggplot(iris, aes(x=Sepal.Width, fill=Species, color=Species)) +
geom_histogram(binwidth = 0.5, position='dodge') +
theme(legend.position='top')
ggplot(data=iris, aes(x=Petal.Length, y=Petal.Width)) +
geom_point()
ggplot(data=iris, aes(x=Petal.Length, y=Petal.Width,
color=Species)) +
geom_point(size=3) +
ggtitle('꽃잎의 길이와 폭') +              # 그래프의 제목 지정
theme(plot.title = element_text(size=25, face='bold', colour='steelblue'))
ggplot(data=iris, aes(y=Petal.Length)) +
geom_boxplot(fill='yellow')
ggplot(data=iris, aes(x=Species, y=Petal.Length, fill=Species)) +
geom_boxplot()
airmiles
year <- 1937:1960
cnt <- as.vector(airmiles)
cnt
df <- data.frame(year,cnt)              # 데이터 준비
head(df)
ggplot(data=df, aes(x=year,y=cnt)) +    # 선그래프 작성
geom_line(col='red')
library(HSAUR)
data("Forbes2000")
ds <- Forbes2000
ds[!complete.cases(ds),]
ds
str(ds)
head(ds)
table(ds$country)
tmp <- sort(table(ds$country), decreasing=T)
tmp
top.10.contry <- tmp[1:10]
top.10.contry
par(mar=c(8,4,4,2))
barplot(top.10.contry,
main='기업수 상위 10개국',
col=rainbow(10),          # 레인보우 팔레트
las=2
)
)
par(mar=c(5,4,4,2))
table(ds$category)
tmp <- sort(table(ds$category), decreasing=T)
tmp
top.10.category <- tmp[1:10]
top.10.category
par(mar=c(10,4,4,2))
barplot(top.10.category,
main='기업수 상위 10개 업종',
col='pink',
las=2)
par(mar=c(5,4,4,2))
tmp <- ds[ds$category %in% names(top.10.category),]
tmp
top.10.category
levels(tmp$category)
tmp$category <- factor(tmp$category)
levels(tmp$category)
par(mar=c(10,4,4,2))
boxplot(assets~category, data=tmp,
ylim=c(0,100),
xlab='',
las=2)
par(mar=c(5,4,4,2))
tmp <- ds[order(ds$marketvalue, decreasing=T),]
tmp
head(tmp)
tmp[1:10,c('name', 'country','category','marketvalue')]
korea <- subset(ds, country=='South Korea')
head(korea)
korea[,c('rank','name','category','marketvalue')]
tmp <- ds[,5:8]
head(tmp)
tmp <- tmp[complete.cases(tmp),]
plot(tmp, lower.panel=NULL)       # 산점도
cor(tmp)
files <- c('data/ds.2015.csv', 'data/ds.2016.csv','data/ds.2017.csv',
'data/ds.2018.csv','data/ds.2019.csv')
ds <- NULL
for (f in files) {
tmp <- read.csv(f, header=T)
ds <- rbind(ds, tmp)
print(f)
}
str(ds)
head(ds)
unique(ds$loc)
range(ds$mdate)
for (i in 3:8) {
cat(names(ds)[i], sum(is.na(ds[,i])), sum(is.na(ds[,i]))/nrow(ds), '\n')
}
ds <- ds[,-8]
ds <- ds[complete.cases(ds),]
mdate <- as.character(ds$mdate)
head(mdate)
ds$year  <- as.numeric(substr(mdate, 1,4))
ds$month <- as.numeric(substr(mdate, 5,6))
ds$hour  <- as.numeric(substr(mdate, 9,10))
ds$locname <- NA
ds$locname[ds$loc==111123] <- '서울'        # 도시
ds$locname[ds$loc==336111] <- '목포'        # 도시
ds$locname[ds$loc==632132] <- '강릉'
head(ds)
boxplot(PM10~locname, data=ds,
main='미세먼지 농도 분포')
boxplot(PM10~locname, data=ds,
main='미세먼지 농도 분포',
ylim=c(1,100))
tmp.year <- aggregate(ds[,7], by=list(year=ds$year,loc=ds$locname), FUN='mean')
tmp.year
head(ds)
tmp.year$loc = as.factor(tmp.year$loc)
head(tmp.year)
ggplot(tmp.year, aes(x=year,y=x, colour=loc, group=loc))+
geom_line()+
geom_point(size=6, shape=19, alpha=0.5)+
ggtitle('연도별 PM10 농도 변화')+
ylab('농도')
tmp.month <- aggregate(ds[,7], by=list(month=ds$month,loc=ds$locname),
FUN='mean')
head(tmp.month)
tmp.month$loc = as.factor(tmp.month$loc)
head(tmp.month)
ggplot(tmp.month, aes(x=month,y=x, colour=loc, group=loc))+
geom_line()+
geom_point(size=3, shape=19, alpha=0.5)+
ggtitle('월별 PM10 농도 변화')+
ylab('농도')
tmp.hour <- aggregate(ds[,7], by=list(hour=ds$hour,loc=ds$locname), FUN='mean')
head(tmp.hour)
tmp.hour$loc = as.factor(tmp.hour$loc)
head(tmp.hour)
ggplot(tmp.hour, aes(x=hour,y=x, colour=loc, group=loc))+
geom_line()+
geom_point(size=3, shape=19, alpha=0.5)+
ggtitle('시간별 PM10 농도 변화')+
ylab('농도')
set.seed(1234)
plot(ds[sample(nrow(ds),5000),3:7], lower.panel=NULL)
cor(ds[,3:7])
ds
cor(ds[,3:7])
tmp.yml <- aggregate(ds[,7], by=list(year=ds$year,month=ds$month,
loc=ds$locname), FUN='mean')
head(tmp.yml)
idx <- which(tmp.yml$x==max(tmp.yml$x))
tmp.yml[idx,]
idx
idx <- which(tmp.yml$x==min(tmp.yml$x))
tmp.yml[idx,]
library(MASS)
str(cats)
head(cats)
plot(cats$Hwt ~ cats$Bwt,
col="forestgreen", pch=19,
xlab="Body Weight (kg)", ylab="Heart Weight (g)",
main="Body Weight and Heart Weight of Cats")
cor(cats$Bwt, cats$Hwt)
with(cats, cor(Bwt, Hwt))
cor.test(cats$Bwt, cats$Hwt)
with(cats, cor.test(Bwt, Hwt))
with(cats, cor.test(~ Bwt + Hwt))
cor.test(~ Bwt + Hwt, data=cats)
cor.test(~ Bwt + Hwt, data=cats, subset=(Sex=="F"))
with(cats, cor.test(~ Bwt + Hwt, subset=(Sex=="M")))
str(iris)
cor(iris[-5])
iris.cor <- cor(iris[, 1:4])
iris.cor
class(iris.cor)
str(iris.cor)
iris.cor["Petal.Width", "Petal.Length"]
cor.test(iris$Petal.Length, iris$Petal.Width)
cor.test(iris$Sepal.Length, iris$Sepal.Width)
cor.test(iris$Petal.Length, iris$Sepal.Width)
cor.test(iris$Sepal.Length, iris$Petal.Width)
iris.na.test <- iris[, 1:4]
iris.na.test[1,1] <- NA
iris.na.test[3,2] <- NA
iris.na.test[4,3] <- NA
head(iris.na.test)
cor(iris.na.test)
cor(iris.na.test, use="complete.obs")
cor(iris.na.test, use="pairwise.complete.obs")
library(psych)
corr.test(iris[-5])
View(mpg)
mpg2 <- mpg
mpg2
mpg2 %>% mutate('합산 연비 변수'=cty + hwy)
mpg2
library(dplyr)
mpg2 %>% mutate('합산 연비 변수'=cty + hwy)
mpg2
View(mpg2)
mpg2 %>% mutate(a=cty + hwy)
View(mpg2)
mpg2 %>%
mutate(total = cty + hwy)
# 7-2
mpg2 %>%
mutate(avg = total/2)
mpg2 <- mpg2 %>%
mutate(total = cty + hwy)
mpg2 <- mpg2 %>%
mutate(avg = total/2)
mpg2
mpg2 %>% arrange(avg) %>%
head(3)
mpg %>% mutate(total = cty + hwy) %>%
mutate(avg = total/2) %>%
arrange(avg) %>%
head(3)
mpg %>%
group_by(class) %>%
summarise(cty_mean = mean(cty))
mpg %>%
group_by(class) %>%
summarise(cty_mean = mean(cty)) %>%
order(desc(cty_mean))
mpg %>%
group_by(class) %>%
mutate(cty_mean = mean(cty)) %>%
order(desc(cty_mean))
mpg %>%
group_by(class) %>%
summarise(cty_mean = mean(cty)) %>%
mutate(cty_mean = cty_mean) %>%
order(desc(cty_mean))
mpg %>%
group_by(class) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(desc(cty_mean))
mpg %>%
summarise(hwy_mean = mean(hwy)) %>%
select(model) %>%
head(3)
mpg
mpg %>%
select(model) %>%
summarise(hwy_mean = mean(hwy)) %>%
head(3)
mpg %>%
summarise(hwy_mean = mean(hwy)) %>%
head(3)
mpg %>%
group_by(manufacturer) %>%
summarise(hwy_mean = mean(hwy)) %>%
head(3)
mpg %>%
group_by(manufacturer) %>%
filter(class == 'compact')
mpg %>%
group_by(manufacturer) %>%
filter(class == 'compact') %>%
summarise(count(class == 'compact'))
mpg %>%
group_by(manufacturer) %>%
summarise(count(class == 'compact'))
mpg %>%
group_by(manufacturer) %>%
filter(class == 'compact') %>%
summarise(count)
View(mpg)
mpg %>%
group_by(manufacturer) %>%
filter(class == 'compact')
mpg %>%
group_by(manufacturer) %>%
filter(class == 'compact') %>%
count
fuel <- data.frame(fl = c('c', 'd', 'e', 'p', 'r'),
price_fl = c(2.35, 2.38, 2.11, 2.76, 2.22),
stringsAsFactors = F)
fuel
data(iris) # 아규먼트에 지정된 이름의 객체(데이터셋)를 로드하는 기능
str(iris)
iris %>% pull(Species)
iris %>% select(matches(".t.")) %>% head
mpg %>% matches(fuel)
fuel
mpg %>% merge(mpg, fule, by = fl)
mpg %>% merge(mpg, fuel, by = fl)
mpg %>% merge(mpg, fuel, by = 'fl')
mpg %>% merge(mpg, fuel)
# 9-1
merge(mpg, fuel)
mpg3 <- merge(mpg, fuel)
mpg3 %>% select(model, fl, price_fl)
mpg3 %>% select(model, fl, price_fl) %>%
head(5)
head(midwest)
midwest %>% mutate(percentage = (poptotal-popadults)/poptotal*100)
midwest %>% mutate(percentage = (total-popadults)/poptotal*100)
midwest %>% mutate(percentage1 = (total-popadults)/poptotal*100)
midwest %>% mutate(percentage1 = (total-popadults)/total*100)
midwest %>% mutate(percentage1 = (total-popadults)/total*100) %>%
select(percentage1) %>%
head(5)
midwest %>% mutate(percentage1 = (total-popadults)/total*100) %>%
select(country, percentage1) %>%
head(5)
midwest %>% mutate(percentage1 = (total-popadults)/total*100) %>%
select(county, percentage1) %>%
head(5)
length(midwest)
View(midwest)
count(midwest)
midwest2 <- midwest %>% mutate(percentage1 = (total-popadults)/total*100) %>%
select(county, percentage1)
midwest2 <- midwest %>% mutate(percentage1 = (total-popadults)/total*100)
for(i in range(1:count(midwest))){
if(midwest2$percentage1[i] >= 40)
midwest2$classification = 'large'
else if(midwest2$percentage1[i] >= 30 & midwest2$percentage1[i] < 40)
midwest2$classification = 'middle'
else
midwest2$classification = 'small'
}
for(i in range(1:437)){
if(midwest2$percentage1[i] >= 40)
midwest2$classification = 'large'
else if(midwest2$percentage1[i] >= 30 & midwest2$percentage1[i] < 40)
midwest2$classification = 'middle'
else
midwest2$classification = 'small'
}
head(midwest2)
head(midwest2$classification)
midwest2 %>% group_by(classification) %>%
count
View(midwest2)
midwest2$percentage1[1]
midwest2$percentage1[2]
for(i in range(1:437)){
if(midwest2$percentage1[i] >= 40)
{midwest2$classification = 'large'}
else if(midwest2$percentage1[i] >= 30 & midwest2$percentage1[i] < 40)
{midwest2$classification = 'middle'}
else
{midwest2$classification = 'small'}
}
View(midwest2)
for(i in range(1:437)){
if(midwest2$percentage1[i] >= 40)
{midwest2$classification = 'large'}
elseif(midwest2$percentage1[i] >= 30 & midwest2$percentage1[i] < 40)
{midwest2$classification = 'middle'}
else
{midwest2$classification = 'small'}
}
midwest2$percentage1[10] > 40
for(i in range(1:437)){
if(midwest2$percentage1[i] >= 40)
{midwest2$classification[i] = 'large'}
else if(midwest2$percentage1[i] >= 30 & midwest2$percentage1[i] < 40)
{midwest2$classification[i] = 'middle'}
else
{midwest2$classification[i] = 'small'}
}
View(midwest2)
for(i in range(1:437)){
if(midwest2$percentage1[i] >= 40)
{midwest2$classification[i] == 'large'}
else if(midwest2$percentage1[i] >= 30 & midwest2$percentage1[i] < 40)
{midwest2$classification[i] == 'middle'}
else
{midwest2$classification[i] == 'small'}
}
View(midwest2)
midwest2$percentage1 <- NULL
for(i in range(1:437)){
if(midwest2$percentage1[i] >= 40)
{midwest2$classification[i] = 'large'}
else if(midwest2$percentage1[i] >= 30 & midwest2$percentage1[i] < 40)
{midwest2$classification[i] = 'middle'}
else
{midwest2$classification[i] = 'small'}
}
midwest2 <- midwest %>% mutate(percentage1 = (total-popadults)/total*100)
for(i in range(1:437)){
if(midwest2$percentage1[i] >= 40)
{midwest2$classification[i] = 'large'}
else if(midwest2$percentage1[i] >= 30 & midwest2$percentage1[i] < 40)
{midwest2$classification[i] = 'middle'}
else
{midwest2$classification[i] = 'small'}
}
midwest2$classification <- NULL
for(i in range(1:437)){
if(midwest2$percentage1[i] >= 40)
{midwest2$classification[i] = 'large'}
else if(midwest2$percentage1[i] >= 30 & midwest2$percentage1[i] < 40)
{midwest2$classification[i] = 'middle'}
else
{midwest2$classification[i] = 'small'}
}
View(midwest2)
mpg %>% mutate(percentage3 = popasian/total*100) %>%
select(state, county, percentage3) %>%
arrange(percentage3)
View(midwest2)
# 10-4
mpg %>% mutate(percentage3 = asian/total*100) %>%
select(state, county, percentage3) %>%
arrange(percentage3)
View(mpg)
midwest %>% mutate(percentage3 = asian/total*100) %>%
select(state, county, percentage3) %>%
arrange(percentage3)
mpg <- as.data.frame(ggplot2::mpg)
mpg[c(65, 124, 131, 153, 212), 'hwy'] <- NA
mpg %>% filter(is.na(drv))
mpg
mpg %>% filter(is.na(hwy))
mpg %>% filter(is.na(drv)) %>%
count
mpg %>% filter(is.na(hwy)) %>%
count
mpg %>% filter(!is.na(hwy)) %>%
arrange(desc(mean(hwy)))
mpg %>% filter(!is.na(hwy)) %>%
group_by(drv) %>%
arrange(desc(mean(hwy)))
mpg %>% filter(!is.na(hwy)) %>%
group_by(drv)
# 11-2
mpg %>% filter(!is.na(hwy)) %>%
group_by(drv) %>%
summarise(mean(hwy))
mpg <- as.data.frame(ggplot2::mpg)
mpg[c(10, 14, 58, 93), 'drv'] <- 'k'
mpg[c(29, 43, 129, 203), 'cty'] <- c(3, 4, 39, 42)
table(mpg$drv)
mpg$drv <- ifelse(mpg$drv == k, NA, mpg$drv)
mpg$drv
mpg$drv <- ifelse(mpg$drv == 'k', NA, mpg$drv)
mpg$drv
table(mpg$drv)
mpg <- as.data.frame(ggplot2::mpg)
mpg[c(10, 14, 58, 93), 'drv'] <- 'k'
mpg[c(29, 43, 129, 203), 'cty'] <- c(3, 4, 39, 42)
mpg$drv <- ifelse(mpg$drv %in% k, NA, mpg$drv)
table(mpg$drv)
mpg$drv <- ifelse(mpg$drv %in% c(k), NA, mpg$drv)
table(mpg$drv)
mpg$drv <- ifelse(mpg$drv %in% 'k', NA, mpg$drv)
table(mpg$drv)
boxplot(mpg$cty)
boxplot(mpg$cty)$stats
boxplot(mpg$hwy)$stats
mpg$cty <- ifelse(mpg$cty > 26 | mpg$cty < 9, NA, mpg$cty)
boxplot(mpg$cty)
# 12-3
mpg %>% group_by(drv) %>%
summarise(mean(cty))
install.packages(c("ggmap", "leaflet"))
library(RSelenium)
library(rvest) #HTML처리
library(httr) #HTML처리
library(stringr) #문자열 함수
remDr <- remoteDriver(remoteServerAddr = "localhost" , port = 4445, browserName = "chrome")
remDr$open()
remDr$navigate("https://www.instagram.com/explore/tags/%EC%A0%9C%EC%A3%BC%EC%B9%B4%ED%8E%98/")
board1 <- remDr$findElement(using = 'css', '#react-root > section > main > article > div:nth-child(3) > div > div:nth-child(1) > div:nth-child(1)')
board1$clickElement()
board1 <- remDr$findElement(using = 'css', '#react-root > section > main > article > div:nth-child(3) > div > div:nth-child(1) > div:nth-child(1)')
board1$clickElement()
remDr$findElement(uusing = 'css', 'body > div._2dDPU.CkGkG > div.zZYga > div > article > div.eo2As > div.EtaWk > ul > div > li > div > div > div.C4VMK > span')
remDr$findElement(using = 'css', 'body > div._2dDPU.CkGkG > div.zZYga > div > article > div.eo2As > div.EtaWk > ul > div > li > div > div > div.C4VMK > span')
content <- remDr$findElement(using = 'css', 'body > div._2dDPU.CkGkG > div.zZYga > div > article > div.eo2As > div.EtaWk > ul > div > li > div > div > div.C4VMK > span')
content
sapply(content, function(x) x$getElementText())
content$getElementText()
